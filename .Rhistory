source('~/.active-rstudio-document', echo=TRUE)
b <- lapply(X=input,fromJSON)
View(b)
View(b)
View(input)
library(RJSONIO)
install.packages("RJSONIO")
Lines <- readLines("yelp_training_set_business.json")
business <- as.data.frame(t(sapply(Lines, fromJSON)))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/AnalyzeYelp.R', echo=TRUE)
install.packages("RJSONIO")
source('~/Desktop/AnalyzeYelp.R', echo=TRUE)
source('~/Desktop/AnalyzeYelp.R', echo=TRUE)
shiny::runApp('iCloud Drive (Archive)/Documents/Info 201/a8-jinc132')
getwd
getwd()
runApp('iCloud Drive (Archive)/Documents/Info 201/a8-jinc132')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
library(leaflet)
install.packages("leaflet")
install.packages("leaflet")
library(leaflet)
library(leaflet)
library(shiny)
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
install.packages("R.utils")
# Libraries
library(leaflet)
library(R.utils)
library(shiny)
library(R.utils)
library(dplyr)
library(ggplot2)
library(mapproj)
library(data.table)
runApp('Downloads/a8-cd')
install.packages("mapproj")
library(leaflet)
library(R.utils)
library(shiny)
library(R.utils)
library(dplyr)
library(ggplot2)
library(mapproj)
library(data.table)
# Reads the ufo coordinates file
ufo_data <- read.csv(file="./data/UFOCoords.csv.bz2", header = TRUE, sep = ",")
# Start shinyServer
server <- shinyServer(function(input, output) {
# Creates a text input box where user inputs the month
# Receives results of sightings during that month
output$value <- renderText({
month_df <- ufo_data
month_df$date_format <- as.Date(month_df$Date, "%m/%d/%Y")
month_df$month <- format(month_df$date_format, "%m")
group_months <- month_df %>% group_by(month) %>% summarise(n())
colnames(group_months)[2] <- "ufo_sightings"
# Distinguishes between what the user inputted and finds the data for that month
if (input$monthInput == "January") {
month <- filter(group_months, month == "01")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "February") {
month <- filter(group_months, month == "02")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "March") {
month <- filter(group_months, month == "03")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "April") {
month <- filter(group_months, month == "04")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "May") {
month <- filter(group_months, month == "05")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "June") {
month <- filter(group_months, month == "06")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "July") {
month <- filter(group_months, month == "07")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "August") {
month <- filter(group_months, month == "08")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "September") {
month <- filter(group_months, month == "09")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "October") {
month <- filter(group_months, month == "10")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "November") {
month <- filter(group_months, month == "11")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "December") {
month <- filter(group_months, month == "12")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else {
paste0("Please enter a valid month")
}
})
# Plot the data creating a bar graph of the number of UFO sightings based on shape
output$shape_plot <- renderPlot({
plot_title <- paste0("Number of UFO Sightings in ",
input$countryInput,
" by Shape Type (2016)")
usa_canada <- filter(ufo_data,
Country == input$countryInput,
AM.PM == input$typeInput)
shapes_df <- select(usa_canada, Shape)
group_shapes <- shapes_df %>% group_by(Shape) %>% summarise(n())
colnames(group_shapes)[2] <- "shape_count"
ggplot(group_shapes, aes(Shape, shape_count, fill = Shape)) +
geom_bar(stat = "identity") +
guides(fill = FALSE, color = FALSE) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(title = plot_title) +
labs(x = "Shape Type", y = "Shape Type Occurrences") +
theme_gray() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25)) +
theme(text=element_text(size=12))
})
# Plot the data creating a bar graph of the number of UFO sightings by state province
output$state_plot <- renderPlot({
choose_province_state <- function(province_state) {
if (input$countryInput == "USA") {
paste0("State")
} else {
paste0("Province")
}
}
# Filter based on country choice
filter_province_state <- function(province_state) {
if (input$countryInput == "USA") {
paste0("USA")
} else {
paste0("CANADA")
}
}
plot_title <- paste0("Number of UFO Sightings in ",
input$countryInput,
" by ", choose_province_state(input$countryInput), " (2016)")
data <- ufo_data %>%
filter(Country == filter_province_state(input$countryInput),
AM.PM == input$typeInput)
ggplot(data) +
geom_bar(mapping = aes(x = reorder(State, State, length), fill = State)) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(plot.title = element_text(lineheight = .8, face = "bold"),
legend.position = "none") +
theme(axis.text.y = element_text(hjust = 1, vjust = 1)) +
xlab(choose_province_state(input$countryInput)) +
ylab("Sightings Count") +
labs(title = plot_title) +
coord_flip()
})
# Plots the data on the map using Leaflet
output$visual_plot <- renderLeaflet({
ufo_data$lat <- as.numeric(ufo_data$lat)
ufo_data$lng <- as.numeric(ufo_data$lng)
filter_data <- filter(ufo_data, AM.PM == input$typeInput,
Country == input$countryInput
)
map <- filter_data %>% leaflet() %>%
addTiles() %>%
addMarkers(lng = ~lng,
lat = ~lat, popup = c(paste0("<b>Description of sighting:</b> ",
filter_data$Summary,
"<br><br><b>Shape:</b> ",
filter_data$Shape,
"<br><br><b>Location: </b>",
filter_data$City, ", ",
filter_data$State, " in ",
filter_data$Country, " at ",
filter_data$Time, " ",
filter_data$AM.PM))
)
map
})
})
runApp('Downloads/a8-cd')
install.packages("rsconnect")
install.packages("rsconnect")
shiny::runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
library(leaflet)
runApp('iCloud Drive (Archive)/Documents/Info 201/a8-jinc132')
runApp('Downloads/a8-cd')
library(leaflet)
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
View(server)
runApp('Downloads/a8-cd')
runApp('Desktop/a8-cd')
install.packages(c("backports", "BH", "bit", "boot", "broom", "callr", "caTools", "class", "clipr", "cluster", "codetools", "colorspace", "curl", "data.table", "DBI", "dbplyr", "devtools", "digest", "dplyr", "evaluate", "foreign", "git2r", "haven", "hexbin", "highr", "hms", "htmlwidgets", "httpuv", "httr", "jsonlite", "lattice", "lubridate", "maps", "markdown", "Matrix", "mgcv", "mime", "nlme", "nycflights13", "openssl", "packrat", "pillar", "pkgconfig", "plotly", "processx", "ps", "purrr", "R6", "Rcpp", "RCurl", "readr", "readxl", "RJSONIO", "rlang", "rpart", "rprojroot", "rsconnect", "rstudioapi", "shiny", "sourcetools", "survival", "tibble", "urltools", "withr", "xtable"))
5*4*2*3*3*2
/6
(5*4*2*3*3*2) / 6
(3*4*2*4*4*4) /6
(2*1*2*3*3*1) / 6
sqrt(120)
sqrt(256)
sqrt(6)
srt(((5*4*2*3*3*2) / 6))
sqrt(((5*4*2*3*3*2) / 6))
sqrt(((3*4*2*4*4*4) / 6))
sqrt(((2*1*2*3*3*1) / 6))
?sample
knitr::opts_chunk$set(echo = TRUE)
# Task 10
random <- sample(0:100, 1)
random <- sample(0:100, 1)
if(random <= 25) {
print("1st Quartile")
} else if(random > 25 && random <= 50) {
print("2nd Quartile")
} else if(random > 50 && random <= 75) {
print("3rd Quartile")
} else {
print("4th Quartile")
}
cities = list("Seattle", "Los Angeles", "New York", "Nashville", "Oceanshore", "Tacoma")
for city in cities :
cities = list("Seattle", "Los Angeles", "New York", "Nashville", "Oceanshore", "Tacoma")
for city in cities {
for (city in cities) {
print("Warning, residents of " + city + ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
string <- "Warning, residents of " + city + ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n"
print(string)
}
for (city in cities) {
paste("Warning, residents of " + city + ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
paste("Warning, residents of ", city, ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
print("Warning, residents of ", city, ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
string <- paste("Warning, residents of ", city, ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
string <- paste("Warning, residents of ", city, ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
print(string)
}
# Task 12
temp <- list()
temp <- list()
states = list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
for (state in states) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = filename.replace("filename", state)
temp.append(filename)
print(filename)
}
temp <- list()
states = list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
for (state in states) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", state, filename)
temp.append(filename)
print(filename)
}
?list
temp <- list()
states = list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
for (index in len(states)) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
for (index in length(states)) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
for (index in length(states)) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
for (index in length(states)) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
states = list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
View(states)
print(length(states))
View(temp)
for (index in length(states)) {
print(index)
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
for (state in states) {
print(state)
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", state, filename)
}
print(states[index])
print(states[index])
for (state in states) {
print(state)
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", state, filename)
temp[[state]] <- filename
print(temp[[state]])
}
View(temp)
View(temp)
temp <- list()
states <- list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
for (state in states) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", state, filename)
temp[[state]] <- filename
print(temp[[state]])
}
View(temp)
count <- 10
while (count <= 0) {
string <- paste("T-minus", count, sep=" ")
print(string)
count--
}
count <- 10
while (count <= 0) {
string <- paste("T-minus", count, sep=" ")
print(string)
--count
}
print(string)
count <- 10
while (count <= 0) {
string <- paste("T-minus", count, sep=" ")
print(string)
--count
}
count <- 10
while (count <= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
--count
}
print(countdown)
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
--count
count <- 10
while (count <= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count -= 1
count <- 10
while (count <= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
}
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
while (count <= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
}
while (count >= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
}
count <- 10
while (count >= 0) {
countdwn <- paste("T-minus", count, sep=" ")
print(countdwn)
count <- count - 1
}
countdown <- function(count) {
while (count >= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
}
}
countdown(10)
quartile_calc <- function(number) {
if(number < 0 || number > 100) {
return("Error: number is out of bounds")
}
}
quartile_calc(101)
quartile_calc <- function(number) {
if (number < 0 || number > 100) {
return("Error: number is out of bounds")
}
if (num <= 25) {
print("1st Quartile")
} else if (num <= 50 && num > 25) {
print("2nd Quartile")
} else if (num <= 75 && num > 50) {
print("3rd Quartile")
} else {
print("4th Quartile")
}
}
quartile_calc(10)
quartile_calc((-2))
# Test
quartile_calc(10)
quartile_calc <- function(num) {
if (num < 0 || num > 100) {
return("Error: number is out of bounds")
}
if (num <= 25) {
print("1st Quartile")
} else if (num <= 50 && num > 25) {
print("2nd Quartile")
} else if (num <= 75 && num > 50) {
print("3rd Quartile")
} else {
print("4th Quartile")
}
}
# Test
quartile_calc(10)
quartile_calc(-2)
quartile_calc(10)
quartile_calc(-2)
quartile_calc(101)
# Test
quartile_calc(29)
pwd
shiny::runApp('Desktop/GEOG458_Final')
setwd("~/Desktop/GEOG458_Final")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Q
runApp()
runApp()
runApp()
source("FreqMap.R")
interactvData <- st_read("./data/interactive.shp")
shinyServer(function(input, output) {
output$freqMap <- renderLeaflet({
bin <- c(0, 9317, 22306, 38701, 77914, 265000)
CreateInteractvMap(interactvData, interactvData$State_Tota, interactvData$NAME,
interactvData$abbreviatn, interactvData$share17,
"U.S. Export Value (Millions of $)", bin) %>%
return()
})
# output$exportType <- renderLeaflet({
#   CreateInteractvMap(interactvData, interactvData$abbreviatn, interactvData$NAME, "2017 Value: ",
#                      interactvData$val2017, interactvData$share17,
#                      "U.S. Export Commodity", NULL) %>%
#     return()
# })
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("randomcoloR")
library(randomcoloR)
runApp()
install.packages("randomcoloR")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Desktop/GEOG458_Final/FreqMap.R')
source('~/Desktop/GEOG458_Final/FreqMap.R')
runApp()
runApp()
