lat = ~lat, popup = c(paste0("<b>Description of sighting:</b> ",
filter_data$Summary,
"<br><br><b>Shape:</b> ",
filter_data$Shape,
"<br><br><b>Location: </b>",
filter_data$City, ", ",
filter_data$State, " in ",
filter_data$Country, " at ",
filter_data$Time, " ",
filter_data$AM.PM))
)
map
})
})
runApp('Downloads/a8-cd')
install.packages("rsconnect")
install.packages("rsconnect")
shiny::runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
library(leaflet)
runApp('iCloud Drive (Archive)/Documents/Info 201/a8-jinc132')
runApp('Downloads/a8-cd')
library(leaflet)
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
View(server)
runApp('Downloads/a8-cd')
runApp('Desktop/a8-cd')
install.packages(c("backports", "BH", "bit", "boot", "broom", "callr", "caTools", "class", "clipr", "cluster", "codetools", "colorspace", "curl", "data.table", "DBI", "dbplyr", "devtools", "digest", "dplyr", "evaluate", "foreign", "git2r", "haven", "hexbin", "highr", "hms", "htmlwidgets", "httpuv", "httr", "jsonlite", "lattice", "lubridate", "maps", "markdown", "Matrix", "mgcv", "mime", "nlme", "nycflights13", "openssl", "packrat", "pillar", "pkgconfig", "plotly", "processx", "ps", "purrr", "R6", "Rcpp", "RCurl", "readr", "readxl", "RJSONIO", "rlang", "rpart", "rprojroot", "rsconnect", "rstudioapi", "shiny", "sourcetools", "survival", "tibble", "urltools", "withr", "xtable"))
5*4*2*3*3*2
/6
(5*4*2*3*3*2) / 6
(3*4*2*4*4*4) /6
(2*1*2*3*3*1) / 6
sqrt(120)
sqrt(256)
sqrt(6)
srt(((5*4*2*3*3*2) / 6))
sqrt(((5*4*2*3*3*2) / 6))
sqrt(((3*4*2*4*4*4) / 6))
sqrt(((2*1*2*3*3*1) / 6))
?sample
knitr::opts_chunk$set(echo = TRUE)
# Task 10
random <- sample(0:100, 1)
random <- sample(0:100, 1)
if(random <= 25) {
print("1st Quartile")
} else if(random > 25 && random <= 50) {
print("2nd Quartile")
} else if(random > 50 && random <= 75) {
print("3rd Quartile")
} else {
print("4th Quartile")
}
cities = list("Seattle", "Los Angeles", "New York", "Nashville", "Oceanshore", "Tacoma")
for city in cities :
cities = list("Seattle", "Los Angeles", "New York", "Nashville", "Oceanshore", "Tacoma")
for city in cities {
for (city in cities) {
print("Warning, residents of " + city + ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
string <- "Warning, residents of " + city + ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n"
print(string)
}
for (city in cities) {
paste("Warning, residents of " + city + ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
paste("Warning, residents of ", city, ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
print("Warning, residents of ", city, ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
string <- paste("Warning, residents of ", city, ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
string <- paste("Warning, residents of ", city, ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
print(string)
}
# Task 12
temp <- list()
temp <- list()
states = list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
for (state in states) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = filename.replace("filename", state)
temp.append(filename)
print(filename)
}
temp <- list()
states = list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
for (state in states) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", state, filename)
temp.append(filename)
print(filename)
}
?list
temp <- list()
states = list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
for (index in len(states)) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
for (index in length(states)) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
for (index in length(states)) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
for (index in length(states)) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
states = list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
View(states)
print(length(states))
View(temp)
for (index in length(states)) {
print(index)
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
for (state in states) {
print(state)
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", state, filename)
}
print(states[index])
print(states[index])
for (state in states) {
print(state)
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", state, filename)
temp[[state]] <- filename
print(temp[[state]])
}
View(temp)
View(temp)
temp <- list()
states <- list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
for (state in states) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", state, filename)
temp[[state]] <- filename
print(temp[[state]])
}
View(temp)
count <- 10
while (count <= 0) {
string <- paste("T-minus", count, sep=" ")
print(string)
count--
}
count <- 10
while (count <= 0) {
string <- paste("T-minus", count, sep=" ")
print(string)
--count
}
print(string)
count <- 10
while (count <= 0) {
string <- paste("T-minus", count, sep=" ")
print(string)
--count
}
count <- 10
while (count <= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
--count
}
print(countdown)
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
--count
count <- 10
while (count <= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count -= 1
count <- 10
while (count <= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
}
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
while (count <= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
}
while (count >= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
}
count <- 10
while (count >= 0) {
countdwn <- paste("T-minus", count, sep=" ")
print(countdwn)
count <- count - 1
}
countdown <- function(count) {
while (count >= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
}
}
countdown(10)
quartile_calc <- function(number) {
if(number < 0 || number > 100) {
return("Error: number is out of bounds")
}
}
quartile_calc(101)
quartile_calc <- function(number) {
if (number < 0 || number > 100) {
return("Error: number is out of bounds")
}
if (num <= 25) {
print("1st Quartile")
} else if (num <= 50 && num > 25) {
print("2nd Quartile")
} else if (num <= 75 && num > 50) {
print("3rd Quartile")
} else {
print("4th Quartile")
}
}
quartile_calc(10)
quartile_calc((-2))
# Test
quartile_calc(10)
quartile_calc <- function(num) {
if (num < 0 || num > 100) {
return("Error: number is out of bounds")
}
if (num <= 25) {
print("1st Quartile")
} else if (num <= 50 && num > 25) {
print("2nd Quartile")
} else if (num <= 75 && num > 50) {
print("3rd Quartile")
} else {
print("4th Quartile")
}
}
# Test
quartile_calc(10)
quartile_calc(-2)
quartile_calc(10)
quartile_calc(-2)
quartile_calc(101)
# Test
quartile_calc(29)
pwd
shiny::runApp('Desktop/GEOG458_Final')
shiny::runApp('Desktop/GEOG458_Final')
runApp('Desktop/GEOG458_Final')
source("server.R")
setwd("~/Desktop/GEOG458_Final")
source("server.R")
runApp()
?tabsetPanel
runApp()
runApp()
runApp()
# Create a Leaflet map
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter") %>%
setView(lat = lat, lng = long, zoom = 3) %>%
addPolygons(data = data,
opacity = 1,
weight = 2,
dashArray = "3",
color = "grey") %>%
addPolygons(data = measure,
fillOpacity = 0.7,
fillColor = ~pal(measure),
popup = paste("Region: ", txt1, "<br>",
popTitle, txt2, "<br>",
"2017 Share Value: ", txt3, "<br>"),
highlightOptions = highlightOptions(weight = 4, bringToFront = TRUE, opacity = 1,
color = "blue", sendToBack = TRUE)) %>%
addLegend(position = "bottomright", pal = pal, values = measure,
title = measureTitle,
opacity = 1)
View(interactvData)
pal <- colorFactor(distinctColorPalette(1), domain = (interactvData$abbreviatn == "ZINC ORES AND CONCENTRATES"))
i <- interactvData$abbreviatn == "ZINC ORES AND CONCENTRATES"
i <- interactvData %>% filter(abbreviatn == "ZINC ORES AND CONCENTRATES")
pal <- colorFactor(distinctColorPalette(1), domain = i)
View(i)
i <- interactvData %>% filter(abbreviatn == "ZINC ORES AND CONCENTRATES")
pal <- colorFactor(distinctColorPalette(1), domain = i)
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter") %>%
setView(lat = lat, lng = long, zoom = 3) %>%
addPolygons(data = interactvData,
opacity = 1,
weight = 2,
dashArray = "3",
color = "grey") %>%
addPolygons(data = i,
fillOpacity = 0.7,
fillColor = ~pal(i$abbreviatn),
highlightOptions = highlightOptions(weight = 4, bringToFront = TRUE, opacity = 1,
color = "blue", sendToBack = TRUE)) %>%
addLegend(position = "bottomright", pal = pal, values = i$abbreviatn,
title = measureTitle,
opacity = 1)
i <- interactvData %>% filter(abbreviatn == "ZINC ORES AND CONCENTRATES")
pal <- colorFactor(distinctColorPalette(1), domain = i)
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter") %>%
setView(lat = 18.43, lng = -119, zoom = 3) %>%
addPolygons(data = interactvData,
opacity = 1,
weight = 2,
dashArray = "3",
color = "grey") %>%
addPolygons(data = i,
fillOpacity = 0.7,
fillColor = ~pal(i$abbreviatn),
highlightOptions = highlightOptions(weight = 4, bringToFront = TRUE, opacity = 1,
color = "blue", sendToBack = TRUE)) %>%
addLegend(position = "bottomright", pal = pal, values = i$abbreviatn,
title = measureTitle,
opacity = 1)
i <- interactvData %>% filter(abbreviatn == "ZINC ORES AND CONCENTRATES")
pal <- colorFactor(distinctColorPalette(1), domain = i)
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter") %>%
setView(lat = 18.43, lng = -119, zoom = 3) %>%
addPolygons(data = interactvData,
opacity = 1,
weight = 2,
dashArray = "3",
color = "grey") %>%
addPolygons(data = i,
fillOpacity = 0.7,
fillColor = ~pal(i$abbreviatn),
highlightOptions = highlightOptions(weight = 4, bringToFront = TRUE, opacity = 1,
color = "blue", sendToBack = TRUE)) %>%
addLegend(position = "bottomright", pal = pal, values = i$abbreviatn,
title = "ko",
opacity = 1)
pal <- colorFactor(distinctColorPalette(3), domain = i)
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter") %>%
setView(lat = 18.43, lng = -119, zoom = 3) %>%
addPolygons(data = interactvData,
opacity = 1,
weight = 2,
dashArray = "3",
color = "grey") %>%
addPolygons(data = i,
fillOpacity = 0.7,
fillColor = ~pal(i$abbreviatn),
highlightOptions = highlightOptions(weight = 4, bringToFront = TRUE, opacity = 1,
color = "blue", sendToBack = TRUE)) %>%
addLegend(position = "bottomright", pal = pal, values = i$abbreviatn,
title = "ko",
opacity = 1)
i <- interactvData %>% filter(abbreviatn == "ZINC ORES AND CONCENTRATES")
pal <- colorFactor(distinctColorPalette(3), domain = i)
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter") %>%
setView(lat = 18.43, lng = -119, zoom = 3) %>%
addPolygons(data = interactvData) %>%
addPolygons(data = i,
opacity = 1,
weight = 2,
dashArray = "3",
color = "grey",
fillOpacity = 0.7,
fillColor = ~pal(i$abbreviatn),
highlightOptions = highlightOptions(weight = 4, bringToFront = TRUE, opacity = 1,
color = "blue", sendToBack = TRUE)) %>%
addLegend(position = "bottomright", pal = pal, values = i$abbreviatn,
title = "ko",
opacity = 1)
i <- interactvData %>% filter(abbreviatn == "PETROL OIL BITUM MINERA")
pal <- colorFactor(distinctColorPalette(3), domain = i)
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter") %>%
setView(lat = 18.43, lng = -119, zoom = 3) %>%
addPolygons(data = interactvData) %>%
addPolygons(data = i,
opacity = 1,
weight = 2,
dashArray = "3",
color = "grey",
fillOpacity = 0.7,
fillColor = ~pal(i$abbreviatn),
highlightOptions = highlightOptions(weight = 4, bringToFront = TRUE, opacity = 1,
color = "blue", sendToBack = TRUE)) %>%
addLegend(position = "bottomright", pal = pal, values = i$abbreviatn,
title = "ko",
opacity = 1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.list(unique(interactvData$abbreviatn))
unique(interactvData$abbreviatn)
l <- unique(interactvData$abbreviatn)
?append
append(exportTp, unique(interactvData$abbreviatn), after = 1)
exportTp <- "All"
append(exportTp, unique(interactvData$abbreviatn), after = 1)
j <- unique(interactvData$abbreviatn)
append(exportTp, j, after = 1)
j <- as.list(unique(interactvData$abbreviatn))
append(exportTp, j, after = 1)
exportTP <- append(exportTp, j, after = 1)
View(exportTP)
exportTp <- "All"
exportTP <- append(exportTp, as.list(unique(interactvData$abbreviatn)), after = 1)
View(exportTP)
runApp()
exportTP <- append(exportTp, unique(interactvData$abbreviatn), after = 1)
exportTp <- "All"
exportTP <- append(exportTp, unique(interactvData$abbreviatn), after = 1)
exportTp <- "All"
exportTP <- append(exportTp, distinct(interactvData$abbreviatn), after = 1)
distinct(interactvData$abbreviatn)
distinct(interactvData$abbreviatn)
unique(interactvData$abbreviatn)
c(unique(interactvData$abbreviatn))
runApp()
runApp()
runApp()
runApp()
o <- unique(interactvData$abbreviatn)
o[25] <- "All"
o[[25]] <- "All"
o <- unique(interactvData$abbreviatn)
o[[25]] <- "All"
o <- list("All", unique(interactvData$abbreviatn))
View(o)
o <- append("All", unique(interactvData$abbreviatn))
j <- interactvData$abbreviatn
o <- append("All", interactvData$abbreviatn)
j <- interactvData$abbreviatn
o <- append("All", interactvData$abbreviatn)
j
o <- append("All", j)
append("All", j)
j <- unique(interactvData$abbreviatn, as.factor = TRUE)
o <- append("All", j)
unique(c(interactvData$abbreviatn))
levels(c(interactvData$abbreviatn))
levels(interactvData$abbreviatn)
o <- append("All", levels(interactvData$abbreviatn))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/iCloud Drive (Archive)/Documents/Info 201/my.meteor')
runApp()
runApp()
runApp()
runApp()
leaflet() %>% addProviderTiles("CartoDB.DarkMatter") %>% addPolygons(data = interactvData)
runApp()
runApp('~/Downloads/GEOG458_Final-master')
name(providers)
#required libraries
library(tidyverse)
library(leaflet)
name(providers)
names(providers)
leaflet() %>% addProviderTiles(provider$OpenStreetMap)
leaflet() %>% addProviderTiles(providers$OpenStreetMap)
leaflet() %>% addProviderTiles("CartoDB.DarkMatter")
runApp('~/Downloads/GEOG458_Final-master')
