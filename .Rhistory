)
map <- filter_data %>% leaflet() %>%
addTiles() %>%
addMarkers(lng = ~lng,
lat = ~lat, popup = c(paste0("<b>Description of sighting:</b> ",
filter_data$Summary,
"<br><br><b>Shape:</b> ",
filter_data$Shape,
"<br><br><b>Location: </b>",
filter_data$City, ", ",
filter_data$State, " in ",
filter_data$Country, " at ",
filter_data$Time, " ",
filter_data$AM.PM))
)
map
})
})
runApp('Downloads/a8-cd')
install.packages("rsconnect")
install.packages("rsconnect")
shiny::runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
library(leaflet)
runApp('iCloud Drive (Archive)/Documents/Info 201/a8-jinc132')
runApp('Downloads/a8-cd')
library(leaflet)
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
View(server)
runApp('Downloads/a8-cd')
runApp('Desktop/a8-cd')
install.packages(c("backports", "BH", "bit", "boot", "broom", "callr", "caTools", "class", "clipr", "cluster", "codetools", "colorspace", "curl", "data.table", "DBI", "dbplyr", "devtools", "digest", "dplyr", "evaluate", "foreign", "git2r", "haven", "hexbin", "highr", "hms", "htmlwidgets", "httpuv", "httr", "jsonlite", "lattice", "lubridate", "maps", "markdown", "Matrix", "mgcv", "mime", "nlme", "nycflights13", "openssl", "packrat", "pillar", "pkgconfig", "plotly", "processx", "ps", "purrr", "R6", "Rcpp", "RCurl", "readr", "readxl", "RJSONIO", "rlang", "rpart", "rprojroot", "rsconnect", "rstudioapi", "shiny", "sourcetools", "survival", "tibble", "urltools", "withr", "xtable"))
5*4*2*3*3*2
/6
(5*4*2*3*3*2) / 6
(3*4*2*4*4*4) /6
(2*1*2*3*3*1) / 6
sqrt(120)
sqrt(256)
sqrt(6)
srt(((5*4*2*3*3*2) / 6))
sqrt(((5*4*2*3*3*2) / 6))
sqrt(((3*4*2*4*4*4) / 6))
sqrt(((2*1*2*3*3*1) / 6))
?sample
knitr::opts_chunk$set(echo = TRUE)
# Task 10
random <- sample(0:100, 1)
random <- sample(0:100, 1)
if(random <= 25) {
print("1st Quartile")
} else if(random > 25 && random <= 50) {
print("2nd Quartile")
} else if(random > 50 && random <= 75) {
print("3rd Quartile")
} else {
print("4th Quartile")
}
cities = list("Seattle", "Los Angeles", "New York", "Nashville", "Oceanshore", "Tacoma")
for city in cities :
cities = list("Seattle", "Los Angeles", "New York", "Nashville", "Oceanshore", "Tacoma")
for city in cities {
for (city in cities) {
print("Warning, residents of " + city + ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
string <- "Warning, residents of " + city + ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n"
print(string)
}
for (city in cities) {
paste("Warning, residents of " + city + ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
paste("Warning, residents of ", city, ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
print("Warning, residents of ", city, ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
string <- paste("Warning, residents of ", city, ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
}
for (city in cities) {
string <- paste("Warning, residents of ", city, ", temperatures will reach sub-zero temperatures today, please stay indoors if possible\n")
print(string)
}
# Task 12
temp <- list()
temp <- list()
states = list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
for (state in states) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = filename.replace("filename", state)
temp.append(filename)
print(filename)
}
temp <- list()
states = list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
for (state in states) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", state, filename)
temp.append(filename)
print(filename)
}
?list
temp <- list()
states = list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
for (index in len(states)) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
for (index in length(states)) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
for (index in length(states)) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
for (index in length(states)) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
states = list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
View(states)
print(length(states))
View(temp)
for (index in length(states)) {
print(index)
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", states[index], filename)
temp[index] <- filename
print(temp[index])
}
for (state in states) {
print(state)
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", state, filename)
}
print(states[index])
print(states[index])
for (state in states) {
print(state)
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", state, filename)
temp[[state]] <- filename
print(temp[[state]])
}
View(temp)
View(temp)
temp <- list()
states <- list("Washington", "California", "Nevada", "Idaho", "Montana", "Utah", "Colorado", "New Mexico")
for (state in states) {
filename <- "U://Users/Zhang/Geog_458/filename.shp"
filename = gsub("filename", state, filename)
temp[[state]] <- filename
print(temp[[state]])
}
View(temp)
count <- 10
while (count <= 0) {
string <- paste("T-minus", count, sep=" ")
print(string)
count--
}
count <- 10
while (count <= 0) {
string <- paste("T-minus", count, sep=" ")
print(string)
--count
}
print(string)
count <- 10
while (count <= 0) {
string <- paste("T-minus", count, sep=" ")
print(string)
--count
}
count <- 10
while (count <= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
--count
}
print(countdown)
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
--count
count <- 10
while (count <= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count -= 1
count <- 10
while (count <= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
}
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
while (count <= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
}
while (count >= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
}
count <- 10
while (count >= 0) {
countdwn <- paste("T-minus", count, sep=" ")
print(countdwn)
count <- count - 1
}
countdown <- function(count) {
while (count >= 0) {
countdown <- paste("T-minus", count, sep=" ")
print(countdown)
count <- count - 1
}
}
countdown(10)
quartile_calc <- function(number) {
if(number < 0 || number > 100) {
return("Error: number is out of bounds")
}
}
quartile_calc(101)
quartile_calc <- function(number) {
if (number < 0 || number > 100) {
return("Error: number is out of bounds")
}
if (num <= 25) {
print("1st Quartile")
} else if (num <= 50 && num > 25) {
print("2nd Quartile")
} else if (num <= 75 && num > 50) {
print("3rd Quartile")
} else {
print("4th Quartile")
}
}
quartile_calc(10)
quartile_calc((-2))
# Test
quartile_calc(10)
quartile_calc <- function(num) {
if (num < 0 || num > 100) {
return("Error: number is out of bounds")
}
if (num <= 25) {
print("1st Quartile")
} else if (num <= 50 && num > 25) {
print("2nd Quartile")
} else if (num <= 75 && num > 50) {
print("3rd Quartile")
} else {
print("4th Quartile")
}
}
# Test
quartile_calc(10)
quartile_calc(-2)
quartile_calc(10)
quartile_calc(-2)
quartile_calc(101)
# Test
quartile_calc(29)
pwd
shiny::runApp('Desktop/GEOG458_Final')
shiny::runApp('Desktop/GEOG458_Final')
runApp('Desktop/GEOG458_Final')
runApp('Desktop/GEOG458_Final')
names(providers)
runApp('Desktop/GEOG458_Final')
runApp('Desktop/GEOG458_Final')
runApp('Desktop/GEOG458_Final')
# Check that the bin is empty and create a random distinct color palette accordingly
if (!is.null(bin)) {
pal <- colorBin(palette = "Greens", domain = measure, bins = bin)
} else {
pal <- colorFactor(distinctColorPalette(24), domain = measure)
}
runApp('Desktop/GEOG458_Final')
require(rgdal)
require(ggplot2)
# install.packages("tmap")
# install.packages("tmaptools)
library(tmap)
library(tmaptools)
library(dplyr)
library(randomcoloR)
# read in the usa and data shape file
usa <- st_read("data/cb_2017_us_state_500k.shp")
require(rgdal)
require(ggplot2)
# install.packages("tmap")
# install.packages("tmaptools)
library(tmap)
library(tmaptools)
library(dplyr)
library(randomcoloR)
# read in the usa and data shape file
usa <- st_read("./data/cb_2017_us_state_500k.shp")
location_q <- st_read("./data/Static.shp")
# filter to 48 states, the other 4 states are not needed
usa_48 <- usa %>%
filter(!(NAME %in% c("Alaska", "District of Columbia", "Hawaii", "Puerto Rico")))
lq_48 <- location_q %>%
filter(!(NAME %in% c("Alaska", "District of Columbia", "Hawaii", "Puerto Rico")))
# creates a map displaying the united states and the location
# quotient values of the top 18 states
pal <- colorNumeric(palette = "Blues", domain = lq_48$LQ)
states_data <- ggplot(data = lq_48) +
geom_sf(data = usa_48, fill = "gray", na.rm = TRUE) +
geom_sf(aes(fill = ~pal(LQ))) +
coord_sf(xlim = c(-128, -65), ylim = c(20, 55), expand = FALSE) +
ggtitle("Top 16 States in Terms of Export Values (Location Quotient)")
# since this is a static map, it is okay to export the map as a png
lq_map <- ggsave("www/lqmap.png", plot = states_data, height = 7, width = 9)
setwd("~/Desktop/GEOG458_Final")
require(rgdal)
require(ggplot2)
# install.packages("tmap")
# install.packages("tmaptools)
library(tmap)
library(tmaptools)
library(dplyr)
library(randomcoloR)
# read in the usa and data shape file
usa <- st_read("./data/cb_2017_us_state_500k.shp")
location_q <- st_read("./data/Static.shp")
# filter to 48 states, the other 4 states are not needed
usa_48 <- usa %>%
filter(!(NAME %in% c("Alaska", "District of Columbia", "Hawaii", "Puerto Rico")))
lq_48 <- location_q %>%
filter(!(NAME %in% c("Alaska", "District of Columbia", "Hawaii", "Puerto Rico")))
# creates a map displaying the united states and the location
# quotient values of the top 18 states
pal <- colorNumeric(palette = "Blues", domain = lq_48$LQ)
states_data <- ggplot(data = lq_48) +
geom_sf(data = usa_48, fill = "gray", na.rm = TRUE) +
geom_sf(aes(fill = ~pal(LQ))) +
coord_sf(xlim = c(-128, -65), ylim = c(20, 55), expand = FALSE) +
ggtitle("Top 16 States in Terms of Export Values (Location Quotient)")
View(usa)
plot(states_data)
states_data
runApp()
runApp()
names(providers)
runApp()
runApp()
View(interactvData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?leafletOutput()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(interactvData)
interactvData %>%
unique(filter(abbreviatn == input$exportType)) %>%
select(hs6)
interactvData %>%
unique(filter(abbreviatn == "LT OILS, PREPS GT=70% PETRO")) %>%
select(hs6)
interactvData %>% filter(abbreviatn == "LT OILS, PREPS GT=70% PETRO")
interactvData %>% filter(abbreviatn == "LT OILS, PREPS GT=70% PETRO") %>% select(hs6)
o <- interactvData %>% filter(abbreviatn == "LT OILS, PREPS GT=70% PETRO") %>% select(hs6)
o$hs6
runApp()
runApp()
o[1]$hs6
o[0]$hs6
runApp()
code <- interactvData %>%
filter(abbreviatn == "LT OILS, PREPS GT=70% PETRO") %>%
select(hs6)
View(code)
code <- code[1]$hs6
runApp()
runApp()
runApp()
runApp()
code <- NULL
if (input$exportType != "All") {
code <- interactvData %>%
filter(abbreviatn == "LT OILS, PREPS GT=70% PETRO") %>%
select(hs6)
}
code <- interactvData %>%
filter(abbreviatn == "LT OILS, PREPS GT=70% PETRO") %>%
select(hs6)
View(code)
code <- code[1]$hs6
code <- interactvData %>%
filter(abbreviatn == "CIVILIAN AIRCRAFT, ENGINES, AND PARTS") %>%
select(hs6)
code <- code[1]$hs6
code <- unique(code[1]$hs6)
code <- unique(code$hs6)
code <- interactvData %>%
filter(abbreviatn == "CIVILIAN AIRCRAFT, ENGINES, AND PARTS") %>%
select(hs6)
code <- unique(code$hs6)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("text.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
prodOverview <- "This map displays regions that export the same product. "+
"The default map shows all 24 export product types as well as their correlating"+
" shipping regions. To understand more in-depth, the user has the ability to view"+
" the shipping commodity individually. By selecting different commodities through"+
" the use of the dropbox, the map will likewise reflect only"+
" the shipping states."
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
